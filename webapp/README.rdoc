== The Setup
- Apache
    version -> 2.4.18-1
- Passenger
    version -> 5.0.23
- RVM
    version -> 1.26.11
- Ruby
    version -> 2.2.1p85
- Rails
    version -> 4.2.5.1
    http://api.rubyonrails.org/
- Mongoid - Database
    version -> 5.1.0
    https://docs.mongodb.org/ecosystem/tutorial/ruby-mongoid-tutorial/
    http://requiremind.com/riding-rails-4-along-with-mongoid-and-ruby-2-dot-0/
- Devise - User Authentication and Session Handling
    http://suvankar.svbtle.com/devise-and-mongoid-in-rails-4
- Materialize - CSS and HTML framework
    http://materializecss.com/
== Linux
- We assume that an email server is available. Set-up, configuration, and Administration are outside the scope of this software. Take neccessary precautions to insure that your server instance is secure enough to host a service of this nature. 
- Make a directory for the project
    mkdir Encryptomail
- Clone the git repo into the directory
    git clone https://github.com/2016SoftwarePractices/Encryptomail.git Encryptomail
- Ensure that mongodb service is running
    Arch
        systemctl enable mongodb.service
        systemctl start mongodb.service
    Ubuntu
        service mongodb start
    Ubuntu upstart
        start mongodb
- IF you haven't installed mongodb you will need to
    Ubuntu
        apt-get install mongodb
    Arch
        pacman -S mongodb
- You should now be able to run the mongo shell to ensure the service is running
    mongo
- Move into the Encryptomail directory you created
    cd Encryptomail/
- Run bundle
    bundle install
- Serve the rails project
    rails s

== Cloud9
- Pull code in from git 

- Run bundle, this downloads all the gems that we are currently using
    bundle install

- Setup the local mongo database for C9
    mongod --bind_ip=$IP --dbpath=data --rest "$@"

- Run Rails
    rails s -b $IP -p $PORT

== Recaptcha
    For testing recaptcha on your machine you are going to first want to generate keys from google at:

    https://www.google.com/recaptcha/

    Then you will need to (in Linux) export your public and private keys:

    export RECAPTCHA_PUBLIC_KEY="6Lc6BAAAAAAAAChqRbQZcn_yyyyyyyyyyyyyyyyy"

    export RECAPTCHA_PRIVATE_KEY="6Lc6BAAAAAAAAKN3DRm6VA_xxxxxxxxxxxxxxxxx"


    After that you should be ready to serve stuff up to localhost and test it out.

    This github project was helpful in the setup https://github.com/ambethia/recaptcha

With the following test keys, you will always get No CAPTCHA and all verification requests will pass.

    Site key: 6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI
    
    Secret key: 6LeIxAcTAAAAAGG-vFI1TnRWxMZNFuojJ4WifJWe
The reCAPTCHA widget will show a warning message to claim that it's only for testing purpose. Please do not use these keys for your production traffic.
